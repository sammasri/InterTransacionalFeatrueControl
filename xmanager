{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "form",
    "id": "ZqEu3vDTqnW2"
   },
   "outputs": [],
   "source": [
    "\n",
    "#@title { form-width: \"2%\" }\n",
    "#@markdown ### Start\n",
    "\n",
    "build_version = \"stable\" #@param [\"stable\", \"beta\"]\n",
    "automatically_clear_cell_output = True  # @param{type: \"boolean\"}\n",
    "# ================================================================ #\n",
    "\n",
    "import os\n",
    "import IPython\n",
    "from IPython.display import clear_output\n",
    "\n",
    "\n",
    "if build_version == \"stable\":\n",
    "\t!curl https://rclone.org/install.sh | sudo bash\n",
    "else:\n",
    "\t!curl https://rclone.org/install.sh | sudo bash -s beta\n",
    "\n",
    "!sudo apt-get -y install fuse3\n",
    "\n",
    "try:\n",
    "\tos.makedirs(\"/root/.config/rclone\", exist_ok=True)\n",
    "except OSError as error:\n",
    "\tpass\n",
    "\n",
    "if automatically_clear_cell_output is True:\n",
    "\tclear_output()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "form",
    "id": "ZqEu3vDTqnW3"
   },
   "outputs": [],
   "source": [
    "#@title { form-width: \"2%\" }\n",
    "#@markdown\n",
    "\n",
    "\n",
    "Mode = \"Copy\" #@param [\"Copy\", \"Move\", \"Sync\", \"Checker\", \"Deduplicate\", \"Remove Empty Directories\", \"Empty Trash\"]\n",
    "Source = \"\" #@param {type:\"string\"}\n",
    "Destination = \"\" #@param {type:\"string\"}\n",
    "\n",
    "#@markdown ---\n",
    "#@markdown ‚öôÔ∏è Global Configuration ‚öôÔ∏è\n",
    "Extra_Arguments = \"\" #@param {type:\"string\"}\n",
    "Compare = \"Size & Mod-Time\" #@param [\"Size & Mod-Time\", \"Size & Checksum\", \"Only Mod-Time\", \"Only Size\", \"Only Checksum\"]\n",
    "Checkers = 5 #@param {type:\"slider\", min:1, max:40, step:1}\n",
    "Transfers = 5 #@param {type:\"slider\", min:1, max:20, step:1}\n",
    "Dry_Run = False #@param {type:\"boolean\"}\n",
    "Do_not_cross_filesystem_boundaries = False\n",
    "Do_not_update_modtime_if_files_are_identical = False #@param {type:\"boolean\"}\n",
    "Google_Drive_optimization = False #@param {type:\"boolean\"}\n",
    "Large_amount_of_files_optimization = False #@param {type:\"boolean\"}\n",
    "Simple_Ouput = True #@param {type:\"boolean\"}\n",
    "Skip_all_files_that_exist = False #@param {type:\"boolean\"}\n",
    "Skip_files_that_are_newer_on_the_destination = False #@param {type:\"boolean\"}\n",
    "Output_Log_File = \"OFF\" #@param [\"OFF\", \"NOTICE\", \"INFO\", \"ERROR\", \"DEBUG\"]\n",
    "\n",
    "#@markdown ‚Ü™Ô∏è Sync Configuration ‚Ü©Ô∏è\n",
    "Sync_Mode = \"Delete during transfer\" #@param [\"Delete during transfer\", \"Delete before transfering\", \"Delete after transfering\"]\n",
    "Track_Renames = False #@param {type:\"boolean\"}\n",
    "\n",
    "#@markdown üíû Deduplicate Configuration üíû\n",
    "Deduplicate_Mode = \"Interactive\" #@param [\"Interactive\", \"Skip\", \"First\", \"Newest\", \"Oldest\", \"Largest\", \"Rename\"]\n",
    "Deduplicate_Use_Trash = True #@param {type:\"boolean\"}\n",
    "\n",
    "#@markdown ---\n",
    "automatically_clear_cell_output = False  # @param{type: \"boolean\"}\n",
    "# ================================================================ #\n",
    "\n",
    "##### Importing the needed modules\n",
    "import os\n",
    "import IPython\n",
    "from IPython.display import HTML, clear_output\n",
    "\n",
    "\n",
    "##### Variable Declaration\n",
    "# Optimized for Google Colaboratory\n",
    "os.environ[\"bufferC\"] = \"--buffer-size 96M\"\n",
    "\n",
    "if Compare == \"Size & Checksum\":\n",
    "    os.environ[\"compareC\"] = \"-c\"\n",
    "elif Compare == \"Only Mod-Time\":\n",
    "    os.environ[\"compareC\"] = \"--ignore-size\"\n",
    "elif Compare == \"Only Size\":\n",
    "    os.environ[\"compareC\"] = \"--size-only\"\n",
    "elif Compare == \"Only Checksum\":\n",
    "    os.environ[\"compareC\"] = \"-c --ignore-size\"\n",
    "else:\n",
    "    os.environ[\"compareC\"] = \"\"\n",
    "\n",
    "os.environ[\"sourceC\"] = Source\n",
    "os.environ[\"destinationC\"] = Destination\n",
    "os.environ[\"transfersC\"] = \"--transfers \"+str(Transfers)\n",
    "os.environ[\"checkersC\"] = \"--checkers \"+str(Checkers)\n",
    "\n",
    "if Skip_files_that_are_newer_on_the_destination == True:\n",
    "    os.environ[\"skipnewC\"] = \"-u\"\n",
    "else:\n",
    "    os.environ[\"skipnewC\"] = \"\"\n",
    "  \n",
    "if Skip_all_files_that_exist == True:\n",
    "    os.environ[\"skipexistC\"] = \"--ignore-existing\"\n",
    "else:\n",
    "    os.environ[\"skipexistC\"] = \"\"\n",
    "  \n",
    "if Do_not_cross_filesystem_boundaries == True:\n",
    "    os.environ[\"nocrossfilesystemC\"] = \"--one-file-system\"\n",
    "else:\n",
    "    os.environ[\"nocrossfilesystemC\"] = \"\"\n",
    "  \n",
    "if Do_not_update_modtime_if_files_are_identical == True:\n",
    "    os.environ[\"noupdatemodtimeC\"] = \"--no-update-modtime\"\n",
    "else:\n",
    "    os.environ[\"noupdatemodtimeC\"] = \"\"\n",
    "\n",
    "if Large_amount_of_files_optimization == True:\n",
    "    os.environ[\"filesoptimizeC\"] = \"--fast-list\"\n",
    "else:\n",
    "    os.environ[\"filesoptimizeC\"] = \"\"\n",
    "  \n",
    "if Google_Drive_optimization == True:\n",
    "    os.environ[\"driveoptimizeC\"] = \"--drive-chunk-size 32M --drive-acknowledge-abuse --drive-keep-revision-forever\"\n",
    "else:\n",
    "    os.environ[\"driveoptimizeC\"] = \"\"\n",
    "  \n",
    "if Dry_Run == True:\n",
    "    os.environ[\"dryrunC\"] = \"-n\"\n",
    "else:\n",
    "    os.environ[\"dryrunC\"] = \"\"\n",
    "  \n",
    "if Output_Log_File != \"OFF\":\n",
    "    os.environ[\"statsC\"] = \"--log-file=/root/.rclone_log/rclone_log.txt\"\n",
    "else:\n",
    "    if Simple_Ouput == True:\n",
    "        os.environ[\"statsC\"] = \"-v --stats-one-line --stats=5s\"\n",
    "    else:\n",
    "        os.environ[\"statsC\"] = \"-v --stats=5s\"\n",
    "  \n",
    "if Output_Log_File == \"INFO\":\n",
    "    os.environ[\"loglevelC\"] = \"--log-level INFO\"\n",
    "elif Output_Log_File == \"ERROR\":\n",
    "    os.environ[\"loglevelC\"] = \"--log-level ERROR\"\n",
    "elif Output_Log_File == \"DEBUG\":\n",
    "    os.environ[\"loglevelC\"] = \"--log-level DEBUG\"\n",
    "else:\n",
    "    os.environ[\"loglevelC\"] = \"\"\n",
    "\n",
    "os.environ[\"extraC\"] = Extra_Arguments\n",
    "\n",
    "if Sync_Mode == \"Delete during transfer\":\n",
    "    os.environ[\"syncmodeC\"] = \"--delete-during\"\n",
    "elif Sync_Mode == \"Delete before transfering\":\n",
    "    os.environ[\"syncmodeC\"] = \"--delete-before\"\n",
    "elif Sync_Mode == \"Delete after transfering\":\n",
    "    os.environ[\"syncmodeC\"] = \"--delete-after\"\n",
    "  \n",
    "if Track_Renames == True:\n",
    "    os.environ[\"trackrenamesC\"] = \"--track-renames\"\n",
    "else:\n",
    "    os.environ[\"trackrenamesC\"] = \"\"\n",
    "  \n",
    "if Deduplicate_Mode == \"Interactive\":\n",
    "    os.environ[\"deduplicateC\"] = \"interactive\"\n",
    "elif Deduplicate_Mode == \"Skip\":\n",
    "    os.environ[\"deduplicateC\"] = \"skip\"\n",
    "elif Deduplicate_Mode == \"First\":\n",
    "    os.environ[\"deduplicateC\"] = \"first\"\n",
    "elif Deduplicate_Mode == \"Newest\":\n",
    "    os.environ[\"deduplicateC\"] = \"newest\"\n",
    "elif Deduplicate_Mode == \"Oldest\":\n",
    "    os.environ[\"deduplicateC\"] = \"oldest\"\n",
    "elif Deduplicate_Mode == \"Largest\":\n",
    "    os.environ[\"deduplicateC\"] = \"largest\"\n",
    "elif Deduplicate_Mode == \"Rename\":\n",
    "    os.environ[\"deduplicateC\"] = \"rename\"\n",
    "  \n",
    "if Deduplicate_Use_Trash == True:\n",
    "    os.environ[\"deduplicatetrashC\"] = \"\"\n",
    "else:\n",
    "    os.environ[\"deduplicatetrashC\"] = \"--drive-use-trash=false\"\n",
    "\n",
    "\n",
    "##### rclone Execution\n",
    "if Output_Log_File != \"OFF\" and Mode != \"Config\":\n",
    "    !mkdir -p -m 666 /root/.rclone_log/\n",
    "    display(HTML(\"Logging enabled, rclone will no longer display any output on the terminal.Please wait until the cell stop by itself.\"))\n",
    "\n",
    "if Mode == \"Copy\":\n",
    "    !rclone --config=/root/.config/rclone/rclone.conf copy \"$sourceC\" \"$destinationC\" \n",
    "checkersC \n",
    "loglevelC \n",
    "skipnewC \n",
    "nocrossfilesystemC \n",
    "bufferC \n",
    "driveoptimizeC \n",
    "extraC\n",
    "elif Mode == \"Move\":\n",
    "    !rclone --config=/root/.config/rclone/rclone.conf move \"$sourceC\" \"$destinationC\" \n",
    "checkersC \n",
    "loglevelC --delete-empty-src-dirs \n",
    "skipnewC \n",
    "nocrossfilesystemC \n",
    "bufferC \n",
    "driveoptimizeC \n",
    "extraC\n",
    "elif Mode == \"Sync\":\n",
    "    !rclone --config=/root/.config/rclone/rclone.conf sync \"$sourceC\" \"$destinationC\" \n",
    "checkersC \n",
    "loglevelC \n",
    "trackrenamesC \n",
    "skipnewC \n",
    "nocrossfilesystemC \n",
    "bufferC \n",
    "driveoptimizeC \n",
    "extraC\n",
    "elif Mode == \"Checker\":\n",
    "    !rclone --config=/root/.config/rclone/rclone.conf check \"$sourceC\" \"$destinationC\" \n",
    "statsC \n",
    "compareC \n",
    "skipexistC \n",
    "noupdatemodtimeC \n",
    "filesoptimizeC \n",
    "dryrunC $extraC\n",
    "elif Mode == \"Deduplicate\":\n",
    "    !rclone --config=/root/.config/rclone/rclone.conf dedupe \"$sourceC\" \n",
    "statsC \n",
    "deduplicateC \n",
    "compareC \n",
    "skipexistC \n",
    "noupdatemodtimeC \n",
    "filesoptimizeC \n",
    "dryrunC $extraC\n",
    "elif Mode == \"Remove Empty Directories\":\n",
    "    !rclone --config=/root/.config/rclone/rclone.conf rmdirs \"$sourceC\" \n",
    "loglevelC \n",
    "extraC\n",
    "elif Mode == \"Empty Trash\":\n",
    "    !rclone --config=/root/.config/rclone/rclone.conf cleanup \"$sourceC\" \n",
    "loglevelC \n",
    "extraC\n",
    "\n",
    "\n",
    "##### Log Output\n",
    "if Output_Log_File != \"OFF\" and Mode != \"Config\":\n",
    "\n",
    "    ##### Rename log file and output settings.\n",
    "    !mv /root/.rclone_log/rclone_log.txt /root/.rclone_log/rclone_log_$(date +%Y-%m-%d_%H.%M.%S).txt\n",
    "    with open(\"/root/.rclone_log/\" + Mode + \"_settings.txt\", \"w\") as f:\n",
    "        f.write(\"Mode: \" + Mode + \\\n",
    "            \"\\nCompare: \" + Compare + \\\n",
    "            \"\\nSource: \\\"\" + Source + \\\n",
    "            \"\\\"\\nDestination: \\\"\" + Destination + \\\n",
    "            \"\\\"\\nTransfers: \" + str(Transfers) + \\\n",
    "            \"\\nCheckers: \" + str(Checkers) + \\\n",
    "            \"\\nSkip files that are newer on the destination: \" + str(Skip_files_that_are_newer_on_the_destination) + \\\n",
    "            \"\\nSkip all files that exist: \" + str(Skip_all_files_that_exist) + \\\n",
    "            \"\\nDo not cross filesystem boundaries: \" + str(Do_not_cross_filesystem_boundaries) + \\\n",
    "            \"\\nDo not update modtime if files are identical: \" + str(Do_not_update_modtime_if_files_are_identical) + \\\n",
    "            \"\\nDry-Run: \" + str(Dry_Run) + \\\n",
    "            \"\\nOutput Log Level: \" + Output_Log_File + \\\n",
    "            \"\\nExtra Arguments: \\\"\" + Extra_Arguments + \\\n",
    "            \"\\\"\\nSync Moden: \" + Sync_Mode + \\\n",
    "            \"\\nTrack Renames: \" + str(Track_Renames) + \\\n",
    "            \"\\nDeduplicate Mode: \" + Deduplicate_Mode + \\\n",
    "            \"\\nDeduplicate Use Trash: \" + str(Deduplicate_Use_Trash))\n",
    "\n",
    "    ##### Compressing log file.\n",
    "    !rm -f /root/rclone_log.zip\n",
    "    !zip -r -q -j -9 /root/rclone_log.zip /root/.rclone_log/\n",
    "    !rm -rf /root/.rclone_log/\n",
    "    !mkdir -p -m 666 /root/.rclone_log/\n",
    "\n",
    "    ##### Send Log\n",
    "    if os.path.isfile(\"/root/rclone_log.zip\") == True:\n",
    "        try:\n",
    "            files.download(\"/root/rclone_log.zip\")\n",
    "            !rm -f /root/rclone_log.zip\n",
    "            display(HTML(\"Sending log to your browser...\"))\n",
    "        except:\n",
    "            !mv /root/rclone_log.zip /content/rclone_log_$(date +%Y-%m-%d_%H.%M.%S).zip\n",
    "            display(HTML(\"You can use file explorer to download the log file.\"))\n",
    "    else:\n",
    "        clear_output()\n",
    "        display(HTML(\"There is no log file.\"))\n",
    "    \n",
    "\n",
    "### Operation has been successfully completed.\n",
    "if Mode != \"Config\":\n",
    "    display(HTML(\"‚úÖ Operation has been successfully completed.\"))\n",
    "\n",
    "\n",
    "##### Automatically clear terminal output if the checkbox's value on the top is set to True.\n",
    "if automatically_clear_cell_output is True:\n",
    "    clear_output()\n",
    "else:\n",
    "\tpass##### Automatically clear terminal output if the checkbox's value on the top is set to True.\n",
    "if automatically_clear_cell_output is True:\n",
    "    clear_output()\n",
    "else:\n",
    "\tpass"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
